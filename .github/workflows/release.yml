name: Release from main

on:
  workflow_dispatch:

jobs:
  determine_version:
    name: "determine version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.find_version.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get tags of release-candidate commit
        id: get_rc_tags
        run: |
          git fetch --tags
          RC_COMMIT=$(git rev-list -n 1 release-candidate)
          RC_TAGS=$(printf "%s," $(git tag --contains $RC_COMMIT))
          RC_TAGS=${RC_TAGS%,}
          echo "rc_tags=$RC_TAGS" >> "$GITHUB_OUTPUT"
      - name: Find next version
        id: find_version
        uses: actions/github-script@v7
        env:
          RC_TAGS: ${{ steps.get_rc_tags.outputs.rc_tags }}
        with:
          result-encoding: string
          script: |
            const { findMostRecentVersion, makeVersionTag } = require('./.github/scripts/find-version.js');
            const tags = process.env.RC_TAGS.split(',');
            const version = findMostRecentVersion(tags);
            version.preRelease = null;
            return makeVersionTag(version);

  build_and_push_api:
    name: "build and push api"
    needs:
      - determine_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create image
        uses: ./.github/actions/create-image
        with:
          IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}-api
          TAG: latest
          OTHER_TAGS: |
            type=raw,value=edge
            type=raw,value=release-candidate
          VERSION: ${{ needs.determine_version.outputs.version }}
          DOCKERFILE: ./apps/server-asset-sg/docker/Dockerfile
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_push_app:
    name: "build and push app"
    needs:
      - determine_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create image
        uses: ./.github/actions/create-image
        with:
          IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}-app
          TAG: latest
          OTHER_TAGS: |
            type=raw,value=edge
            type=raw,value=release-candidate
          VERSION: ${{ needs.determine_version.outputs.version }}
          DOCKERFILE: ./apps/client-asset-sg/docker/Dockerfile
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag_commit:
    name: "tag commit"
    needs:
      - determine_version
      - build_and_push_api
      - build_and_push_app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: tag latest
        uses: ./.github/actions/tag-commit
        with:
          TAG_NAME: latest
          SHA: ${{ github.sha }}
      - name: Tag release-candidate
        uses: ./.github/actions/tag-commit
        with:
          TAG_NAME: release-candidate
          SHA: ${{ github.sha }}
      - name: Tag edge
        uses: ./.github/actions/tag-commit
        with:
          TAG_NAME: edge
          SHA: ${{ github.sha }}
      - name: Tag version
        uses: ./.github/actions/tag-commit
        with:
          TAG_NAME: ${{ needs.determine_version.outputs.version }}
          SHA: ${{ github.sha }}

  create_release:
    name: "create release"
    needs:
      - determine_version
      - build_and_push_api
      - build_and_push_app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ needs.determine_version.outputs.version }}"
          name: "swissgeol-assets v${{ needs.determine_version.outputs.version }}"
          generate_release_notes: true
          make_latest: true

  cleanup:
    name: "cleanup"
    needs:
      - determine_version
      - create_release
      - tag_commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup node
        run: |
          npm install @octokit/rest
      - name: Get tags
        id: get_tags
        run: |
          git fetch --tags
          TAGS=$(printf "%s," $(git tag))
          TAGS=${TAGS%,}
          echo "tags=$TAGS" >> "$GITHUB_OUTPUT"
      - name: Remove outdated versions
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}
          CURRENT_VERSION: ${{ needs.determine_version.outputs.version }}
          TAGS: ${{ steps.get_tags.outputs.tags }}
        with:
          script: |
            const { findOutdatedVersions, makeVersionTag } = require('./.github/scripts/find-version.js');
            const { removePackageVersions } = require('./.github/scripts/remove-packages.js');

            const tags = process.env.TAGS.split(',');
            const outdatedVersions = findOutdatedVersions(tags, process.env.CURRENT_VERSION).map(makeVersionTag);
            for (const version of outdatedVersions) {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${version}`,
              });
            }

            await removePackageVersions(`${process.env.BASE_IMAGE_NAME}-api`, outdatedVersions);
            await removePackageVersions(`${process.env.BASE_IMAGE_NAME}-app`, outdatedVersions);
