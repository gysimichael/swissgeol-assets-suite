name: 'create docker image'
description: 'Builds a docker image and tags it'
inputs:
  IMAGE_NAME:
    description: 'The image name'
    required: true
  VERSION:
    description: 'The version of the image'
    required: true
  PREFIX:
    description: 'The version prefix'
    required: true
  TAG:
    description: 'The tag of the image'
    required: true
  LATEST:
    description: 'The latest tag of the image'
    required: true
  CACHE:
    description: 'The cache tag of the image'
    required: true
  DOCKERFILE:
    description: 'The path to the Dockerfile'
    required: true
  TOKEN:  
    description: 'The GitHub token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set environment variables
      shell: bash
      run: |
        echo COMMITED_AT=$(git show -s --format=%cI ${{ github.sha }}) >> $GITHUB_ENV
        echo REVISION=$(git rev-parse --short HEAD) >> $GITHUB_ENV

    - name: Collect docker image metadata
      id: meta-data
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.IMAGE_NAME }}
        labels: |
          org.opencontainers.image.created=${{ env.COMMITED_AT }}
          org.opencontainers.image.version=${{ inputs.PREFIX }}${{ inputs.VERSION }}
          org.opencontainers.image.maintainer=EBP Schweiz AG
        flavor: |
          latest=${{ inputs.LATEST }}
        tags: |
          ${{ inputs.TAG }}
          ${{ inputs.PREFIX }}${{ inputs.VERSION }}

    - name: Log in to the GitHub container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./
        file: ${{ inputs.DOCKERFILE }}
        push: true
        build-args: |
          VERSION=${{ inputs.VERSION }}
          REVISION=${{ env.REVISION }}
        tags: ${{ steps.meta-data.outputs.tags }}
        labels: ${{ steps.meta-data.outputs.labels }}
        cache-from: type=registry,ref=${{ inputs.IMAGE_NAME }}:${{ inputs.CACHE }}
        cache-to: type=inline
